#@ load("@ytt:data", "data")
resource_types:
- name: email
  type: docker-image
  source:
    repository: pcfseceng/email-resource

resources:
- name: schedule
  type: time
  source:
    interval: 24h
    start: "12:00 AM"
    stop: "11:59 PM"
    location: America/Los_Angeles
    days: [Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday]

- name: automation-repo
  type: git
  source:
    uri: ((automation_git_url))
    branch: ((automation_git_branch))
    username: ((git_username))
    password: ((git_token))

- name: locks
  type: pool
  source:
    pool: ((lock_folder))
    uri: ((locks_git_url))
    branch: ((locks_git_branch))
    username: ((git_username))
    password: ((git_token))
    retry_delay: 60s

- name: email
  type: email
  source:
    smtp:
      host: ((smtp_address))
      port: ((smtp_port))
      username: ((smtp_username))
      password: ((smtp_password))
    from: ((from_address))
    to: [((to_addresses))]

- name: tile-config-convertor
  type: github-release
  source:
    user: rahulkj
    repository: tile-config-convertor
    access_token: ((git_token))

- name: custom-docker-image
  type: docker-image
  source:
    repository: rjain/buildbox

#@ for product in data.values.products:
#@ if product.deploy_product == True:
- name: #@ product.name + "-git-repo"
  type: git
  source:
    uri: ((config_repo_git_url))
    branch: ((config_repo_git_branch))
    username: ((git_username))
    password: ((git_token))
    paths:
    - #@ "((" + product.name + "_config_path))/((" + product.name + "_config_filename))"
    - #@ "((" + product.name + "_vars_path))/((" + product.name + "_var_filename))"
    - ((opsman_env_path))/((opsman_env_filename))

- name: #@ product.name
  type: s3
  source:
    endpoint: ((s3_endpoint))
    access_key_id: ((s3_access_key))
    secret_access_key: ((s3_secret_key))
    disable_ssl: ((s3_disable_ssl))
    bucket: #@ product.s3_bucket
    regexp: #@ product.s3_product_regex

#@ if/end product.has_stemcell == True:
- name: #@ product.name + "-stemcells"
  type: s3
  source:
    endpoint: ((s3_endpoint))
    access_key_id: ((s3_access_key))
    secret_access_key: ((s3_secret_key))
    disable_ssl: ((s3_disable_ssl))
    bucket: #@ product.s3_stemcell_bucket
    regexp: #@ "bosh-stemcell-(" + product.stemcell_version + ".*)-" + data.values.iaas + "-esxi-ubuntu-xenial-go_agent.tgz"
#@ end

#@ if product.is_platform_automation == True:
- name: #@ product.name
  type: s3
  source:
    endpoint: ((s3_endpoint))
    bucket: #@ product.s3_bucket
    regexp: #@ product.s3_product_regex
    access_key_id: ((s3_access_key))
    secret_access_key: ((s3_secret_key))
    disable_ssl: true
#@ end
#@ end

groups:
- name: all
  jobs:
  - scheduler
  - unset-lock
  #@ for product in data.values.products:
  #@ if product.deploy_product == True:
  #@ if data.values.separate_config == True:
  - #@ "lock-upload-stage-" + product.name
  - #@ "configure-deploy-unlock-" + product.name
  #@ else:
  - #@ "lock-upload-stage-configure-deploy-unlock-" + product.name
  #@ end
  - #@ "generate-config-" + product.name
  #@ end
  #@ end
#@ for product in data.values.products:
#@ if product.deploy_product == True:
- name: #@ product.name
  jobs:
  #@ if data.values.separate_config == True:
  - #@ "lock-upload-stage-" + product.name
  - #@ "configure-deploy-unlock-" + product.name
  #@ else:
  - #@ "lock-upload-stage-configure-deploy-unlock-" + product.name
  #@ end
  - #@ "generate-config-" + product.name
#@ end
#@ end

jobs:
- name: scheduler
  plan:
  - get: schedule
    trigger: true

#@ for product in data.values.products:
#@ if product.deploy_product == True:
#@ index=data.values.products.index(product)
#@ if index != 0:
#@  product_prev=data.values.products[index-1]
#@ end
#@ if data.values.separate_config == True:
#@   job_name="lock-upload-stage-"
#@   config_job_name="configure-deploy-unlock-"
#@ else:
#@   job_name="lock-upload-stage-configure-deploy-unlock-"
#@   config_job_name="lock-upload-stage-configure-deploy-unlock-"
#@ end
- name: #@ job_name + product.name
  serial: true
  plan:
  - in_parallel:
    - get: schedule
      #@ if index != 0:
      passed:
      - #@ config_job_name + product_prev.name
      #@ else:
      passed:
      - scheduler
      #@ end
    - get: config-repo
      resource: #@ product.name + "-git-repo"
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
        globs: ["*.tgz"]
    - get: platform-automation-tasks
      params:
        unpack: true
        globs: ["*.zip"]
    - get: product
      resource: #@ product.name
      trigger: true
    #@ if/end product.has_stemcell == True:
    - get: stemcells
      resource: #@ product.name + "-stemcells"
      trigger: true
    - put: locks
      params: {acquire: true}
      get_params:
        depth: 30

  - task: create-opsman-env-file
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: config-repo
    output_mapping:
      interpolated-files: env
    params:
      PREFIX: ((credhub_prefix))
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_client_secret))
      CREDHUB_SERVER: ((credhub_server))
      INTERPOLATION_PATHS: ((opsman_env_path))

  - in_parallel:
    - task: upload-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-product.yml
      input_mapping:
        product: product
        env: env
      params:
        ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
      on_failure:
        put: locks
        params: {release: locks}
        get_params:
          depth: 30

    #@ if/end product.has_stemcell == True:
    - task: upload-stemcell
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-stemcell.yml
      input_mapping:
        stemcell: stemcells
        env: env
      params:
        ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
      on_failure:
        put: locks
        params: {release: locks}
        get_params:
          depth: 30

  - task: stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: product
      env: env
    params:
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
    on_failure:
      put: locks
      params: {release: locks}
      get_params:
        depth: 30

#@ if data.values.separate_config == True:
  - put: locks
    params: {release: locks}
    get_params:
      depth: 30
#@ end

#@ if data.values.separate_config != True:
  - task: create-product-var-files
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: config-repo
    output_mapping:
      interpolated-files: vars
    params:
      PREFIX: ((credhub_prefix))
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_client_secret))
      CREDHUB_SERVER: ((credhub_server))
      INTERPOLATION_PATHS: #@ "((" + product.name + "_vars_path))"
      SKIP_MISSING: true
    on_failure:
      put: locks
      params: {release: locks}
      get_params:
        depth: 30

  - task: config-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config-repo
      env: env
      vars: vars
    params:
      CONFIG_FILE: #@ "((" + product.name + "_config_path))/((" + product.name + "_config_filename))"
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
      VARS_FILES: #@ "((vars_folder))/((" + product.name + "_vars_path))/((" + product.name + "_var_filename))"
    on_failure:
      put: locks
      params: {release: locks}
      get_params:
        depth: 30

  - task: deploy-product
    file: automation-repo/tasks/apply-product-changes.yml
    input_mapping:
      env: env
      config: config-repo
    params:
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
      CONFIG_FILE: #@ "((" + product.name + "_config_path))/((" + product.name + "_config_filename))"
    attempts: ((attempts))
    on_failure:
      put: locks
      params: {release: locks}
      get_params:
        depth: 30

  - put: locks
    params: {release: locks}
    get_params:
      depth: 30

  - put: email
    params:
      subject_text: "Build finished: ${BUILD_PIPELINE_NAME}/${BUILD_JOB_NAME}/${BUILD_NAME}"
      body_text: "Build finished: ${ATC_EXTERNAL_URL}/teams/main/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}"
#@ end
#@ end
#@ end

#@ for product in data.values.products:
#@ if product.deploy_product == True:
#@ if data.values.separate_config == True:
- name: #@ "configure-deploy-unlock-" + product.name
  serial: true
  plan:
  - in_parallel:
    - get: locks
      params:
        depth: 30
    - get: config-repo
      resource: #@ product.name + "-git-repo"
      trigger: true
    - get: automation-repo
    - get: platform-automation-image
      params:
        unpack: true
        globs: ["*.tgz"]
    - get: platform-automation-tasks
      params:
        unpack: true
        globs: ["*.zip"]
    - get: schedule
      passed:
      - #@ "lock-upload-stage-" + product.name
    - get: product
      resource: #@ product.name
      passed:
      - #@ "lock-upload-stage-" + product.name
      trigger: true
    #@ if/end product.has_stemcell == True:
    - get: stemcells
      resource: #@ product.name + "-stemcells"
      passed:
      - #@ "lock-upload-stage-" + product.name
      trigger: true
      params:
        skip_download: "true"

    - put: locks
      params: {acquire: true}
      get_params:
        depth: 30

  - task: create-opsman-env-file
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: config-repo
    output_mapping:
      interpolated-files: env
    params:
      PREFIX: ((credhub_prefix))
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_client_secret))
      CREDHUB_SERVER: ((credhub_server))
      INTERPOLATION_PATHS: ((opsman_env_path))
    on_failure:
      put: locks
      params: {release: locks}
      get_params:
        depth: 30

  - task: create-product-var-files
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: config-repo
    output_mapping:
      interpolated-files: vars
    params:
      PREFIX: ((credhub_prefix))
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_client_secret))
      CREDHUB_SERVER: ((credhub_server))
      INTERPOLATION_PATHS: #@ "((" + product.name + "_vars_path))"
      SKIP_MISSING: true
    on_failure:
      put: locks
      params: {release: locks}
      get_params:
        depth: 30

  - task: config-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config-repo
      env: env
      vars: vars
    params:
      CONFIG_FILE: #@ "((" + product.name + "_config_path))/((" + product.name + "_config_filename))"
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
      VARS_FILES: #@ "((vars_folder))/((" + product.name + "_vars_path))/((" + product.name + "_var_filename))"
    on_failure:
      put: locks
      params: {release: locks}
      get_params:
        depth: 30

  - task: deploy-product
    file: automation-repo/tasks/apply-changes.yml
    input_mapping:
      env: env
      config: config-repo
    params:
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
      APPLY_CHANGES_CONFIG: #@ "((" + product.name + "_config_path))/((apply_changes_config_filename))"
    attempts: ((attempts))
    on_failure:
      put: locks
      params: {release: locks}
      get_params:
        depth: 30

  - put: locks
    params: {release: locks}
    get_params:
        depth: 30

  - put: email
    params:
      subject_text: "Build finished: ${BUILD_PIPELINE_NAME}/${BUILD_JOB_NAME}/${BUILD_NAME}"
      body_text: "Build finished: ${ATC_EXTERNAL_URL}/teams/main/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}"
#@ end
#@ end
#@ end

#@ for product in data.values.products:
#@ if product.deploy_product == True:
- name: #@ "generate-config-" + product.name
  serial: true
  plan:
  - in_parallel:
    - get: automation-repo
    - get: config-repo
      resource: #@ product.name + "-git-repo"
    - get: tile-config-convertor
      params:
        globs:
        - "*linux*64"
    - get: custom-docker-image
    - get: platform-automation-image
      params:
        unpack: true
        globs: ["*.tgz"]
    - get: platform-automation-tasks
      params:
        unpack: true
        globs: ["*.zip"]
    - get: product
      resource: #@ product.name
      trigger: true
      params:
        skip_download: "true"
      #@ if data.values.separate_config == True:
      passed:
      - #@ "lock-upload-stage-" + product.name
      #@ else:
      passed:
      - #@ "lock-upload-stage-configure-deploy-unlock-" + product.name
      #@ end
    #@ if product.has_stemcell == True:
    - get: #@ product.name + "-stemcells"
      #@ if data.values.separate_config == True:
      passed:
      - #@ "lock-upload-stage-" + product.name
      #@ else:
      passed:
      - #@ "lock-upload-stage-configure-deploy-unlock-" + product.name
      #@ end
      params:
        skip_download: "true"
    #@ end

  - task: create-opsman-env-file
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: config-repo
    output_mapping:
      interpolated-files: env
    params:
      PREFIX: ((credhub_prefix))
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_client_secret))
      CREDHUB_SERVER: ((credhub_server))
      INTERPOLATION_PATHS: ((opsman_env_path))

  - task: generate-config
    image: custom-docker-image
    file: automation-repo/tasks/generate-config/task.yml
    input_mapping:
      git-repo: automation-repo
      env: env
      config: config-repo
    params:
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
      CONFIG_FILE: #@ "((" + product.name + "_config_path))/((" + product.name + "_config_filename))"
#@ end
#@ end

- name: unset-lock
  plan:
  - get: locks
    params:
      depth: 30
  - put: locks
    params: {release: locks}
    get_params:
        depth: 30
