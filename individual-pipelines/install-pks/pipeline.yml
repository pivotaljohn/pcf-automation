resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: email
  type: docker-image
  source:
    repository: pcfseceng/email-resource

resources:
- name: custom-docker-image
  type: docker-image
  source:
    repository: rjain/buildbox

- name: tile-config-convertor
  type: github-release
  source:
    user: rahulkj
    repository: tile-config-convertor
    access_token: ((git_token)) ## Optional: Removing this will cause you to hit the rate limit

- name: config-repo
  type: git
  source:
    uri: ((config_repo_git_url))
    branch: ((config_repo_git_branch))
    username: ((git_username))
    password: ((git_token))

- name: automation-repo
  type: git
  source:
    uri: ((automation_git_url))
    branch: ((automation_git_branch))
    username: ((git_username))
    password: ((git_token))

- name: ops-manager
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ops-manager
    product_version: ((opsman_product_version))

- name: pks-product
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ((pks_product_slug))
    product_version: ((pks_product_version))

- name: platform-automation-image
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: ((platform_automation_version))
    sort_by: semver

- name: platform-automation-tasks
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: ((platform_automation_version))
    sort_by: semver

- name: email
  type: email
  source:
    smtp:
      host: ((smtp_address))
      port: ((smtp_port))
      username: ((smtp_username))
      password: ((smtp_password))
    from: ((from_address))
    to: [((to_addresses))]

- name: pipeline-lock
  type: pool
  source:
    pool: ((lock_folder))
    uri: ((locks_git_url))
    branch: ((locks_git_branch))
    username: ((git_username))
    password: ((git_token))

- name: opsman-backup-bucket
  type: s3
  source:
    endpoint: ((s3_endpoint))
    bucket: ((s3_bucket))
    regexp: installation-(.*).zip
    access_key_id: ((s3_access_key))
    secret_access_key: ((s3_secret_key))

credhub-interpolate: &credhub-interpolate-env
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  input_mapping:
    files: config-repo
  output_mapping:
    interpolated-files: env
  params:
    PREFIX: ((credhub_prefix))
    CREDHUB_CA_CERT: ((credhub_ca_cert))
    CREDHUB_CLIENT: ((credhub_client))
    CREDHUB_SECRET: ((credhub_client_secret))
    CREDHUB_SERVER: ((credhub_server))
    INTERPOLATION_PATHS: ((opsman_env_path))
    SKIP_MISSING: true

credhub-interpolate: &credhub-interpolate-vars
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  input_mapping:
    files: config-repo
  output_mapping:
    interpolated-files: vars
  params:
    PREFIX: ((credhub_prefix))
    CREDHUB_CA_CERT: ((credhub_ca_cert))
    CREDHUB_CLIENT: ((credhub_client))
    CREDHUB_SECRET: ((credhub_client_secret))
    CREDHUB_SERVER: ((credhub_server))
    INTERPOLATION_PATHS: ((product_vars_path))
    SKIP_MISSING: true

cli-params: &cli-params
  params:
    globs:
    - "*linux*64*"

groups:
- name: complete
  jobs:
  - set-opsman-lock
  - install-ops-manager
  - configure-ops-director
  - deploy-director
  - release-opsman-lock
  - set-upgrade-opsman-lock
  - upgrade-ops-manager
  - install-ops-manager
  - release-upgrade-opsman-lock
  - release-lock
  - upload-pks
  - stage-pks
  - generate-pks-config
  - configure-pks
  - set-lock
  - deploy
  - unset-lock
  - delete-all
- name: install-opsman
  jobs:
  - set-opsman-lock
  - install-ops-manager
  - configure-ops-director
  - deploy-director
  - release-opsman-lock
  - unset-lock
- name: upgrade-opsman
  jobs:
  - set-upgrade-opsman-lock
  - upgrade-ops-manager
  - install-ops-manager
  - release-upgrade-opsman-lock
  - unset-lock
- name: deploy-product
  jobs:
  - release-lock
  - upload-pks
  - stage-pks
  - generate-pks-config
  - configure-pks
  - set-lock
  - deploy
  - unset-lock
- name: cleanup
  jobs:
  - delete-all

jobs:
- name: set-opsman-lock
  plan:
  - in_parallel:
    - get: pivnet-product
      resource: ops-manager
      params:
        globs: []
  - put: pipeline-lock
    params: {acquire: true}

- name: install-ops-manager
  plan:
  - in_parallel:
    - get: pipeline-lock
      passed: [set-opsman-lock]
    - get: config-repo
    - get: platform-automation-image
      params:
        globs: ["*.tgz"]
        unpack: true
    - get: platform-automation-tasks
      params:
        globs: ["*.zip"]
        unpack: true
    - get: pivnet-product
      resource: ops-manager
      params:
        globs:
        - ((opsman_glob))
      passed: [set-opsman-lock]
      trigger: true

  - task: credhub-interpolate-env
    <<: *credhub-interpolate-env

  - task: credhub-interpolate-vars
    <<: *credhub-interpolate-vars

  - task: deploy-opsmanager-vm
    image: platform-automation-image
    file: platform-automation-tasks/tasks/create-vm.yml
    input_mapping:
      state: config-repo
      image: pivnet-product
      config: config-repo
      vars: vars
    params:
      OPSMAN_CONFIG_FILE: ((product_config_path))/((opsman_config_filename))
      STATE_FILE: ((state_filename))
      VARS_FILES: ((vars_folder))/((product_vars_path))/((opsman_var_filename))

  - task: commit-files-into-git
    image: platform-automation-image
    file: platform-automation-tasks/tasks/make-git-commit.yml
    input_mapping:
      repository: config-repo
      file-source: generated-state
    params:
      FILE_SOURCE_PATH: ((state_filename))
      FILE_DESTINATION_PATH: ((state_file_destination))/((state_filename))
      GIT_AUTHOR_NAME: ((ci_username))
      GIT_AUTHOR_EMAIL: ((ci_email_address))
      COMMIT_MESSAGE: "Updated state file after creating the OpsManager VM"

  - put: config-repo
    params:
      repository: repository-commit

  - task: configure-authentication
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-authentication.yml
    input_mapping:
      config: vars
      env: env
    params:
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
      AUTH_CONFIG_FILE: ((product_vars_path))/((opsman_auth_filename))
    attempts: ((attempts))

- name: configure-ops-director
  plan:
  - in_parallel:
    - get: pipeline-lock
      passed: [install-ops-manager]
    - get: config-repo
    - get: platform-automation-image
      params:
        globs: ["*.tgz"]
        unpack: true
    - get: platform-automation-tasks
      params:
        globs: ["*.zip"]
        unpack: true
    - get: pivnet-product
      resource: ops-manager
      params:
        globs: []
      trigger: true
      passed: [install-ops-manager]

  - task: credhub-interpolate-config
    <<: *credhub-interpolate-config

  - task: credhub-interpolate-env
    <<: *credhub-interpolate-env

  - task: credhub-interpolate-vars
    <<: *credhub-interpolate-vars

  - task: configure-ops-director
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: config-repo
      vars: vars
    params:
      VARS_FILES: ((vars_folder))/((product_vars_path))/((ops_director_var_filename))
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
      DIRECTOR_CONFIG_FILE: ((product_config_path))/((ops_director_config_filename))

- name: deploy-director
  plan:
  - in_parallel:
    - get: pipeline-lock
      passed: [configure-ops-director]
    - get: config-repo
    - get: platform-automation-image
      params:
        globs: ["*.tgz"]
        unpack: true
    - get: platform-automation-tasks
      params:
        globs: ["*.zip"]
        unpack: true
    - get: pivnet-product
      resource: ops-manager
      params:
        globs: []
      trigger: true
      passed: [configure-ops-director]

  - task: credhub-interpolate-env
    <<: *credhub-interpolate-env

  - task: deploy-ops-director
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: env
    params:
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
    attempts: ((attempts))

- name: release-opsman-lock
  plan:
  - get: pipeline-lock
    passed: [deploy-director]
    trigger: true
  - put: pipeline-lock
    params: {release: pipeline-lock}

- name: upload-pks
  serial: true
  plan:
  - in_parallel:
    - get: pipeline-lock
      passed: [configure-ops-director]
    - get: config-repo
    - get: automation-repo
    - get: platform-automation-image
      params:
        globs: ["*.tgz"]
        unpack: true
    - get: platform-automation-tasks
      params:
        globs: ["*.zip"]
        unpack: true
    - get: pks-product
      params:
        globs: [((pks_product_glob))]
      trigger: true
    - get: custom-docker-image

  - task: credhub-interpolate-env
    <<: *credhub-interpolate-env
  - in_parallel:
    - task: upload-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-product.yml
      input_mapping:
        product: pks-product
        env: env
      params:
        ENV_FILE: ((opsman_env_path))/((opsman_env_filename))

    - task: download-stemcell
      image: custom-docker-image
      file: automation-repo/tasks/download-stemcell/task.yml
      input_mapping:
        product: pks-product
      params:
        PIVNET_API_TOKEN: ((pivnet_token))
        IAAS_TYPE: ((iaas_type))
        STEMCELL_TYPE: ((stemcell_type))

  - task: upload-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      stemcell: stemcells
      env: env
    params:
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))

- name: set-lock
  plan:
  - in_parallel:
    - get: pipeline-lock
      passed: [upload-pks]
    - get: pks-product
      params:
        globs: []
      trigger: true
      passed: [upload-pks]
    - get: platform-automation-image
      params:
        globs: ["*.tgz"]
        unpack: true
    - get: platform-automation-tasks
      params:
        globs: ["*.zip"]
        unpack: true
  - put: pipeline-lock
    params: {acquire: true}

- name: stage-pks
  serial: true
  plan:
  - in_parallel:
    - get: config-repo
    - get: platform-automation-image
      params:
        globs: ["*.tgz"]
        unpack: true
    - get: platform-automation-tasks
      params:
        globs: ["*.zip"]
        unpack: true
    - get: pks-product
      params:
        globs: [((pks_product_glob))]
      trigger: true
      passed: [set-lock]

  - task: credhub-interpolate-env
    <<: *credhub-interpolate-env

  - task: stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: pks-product
      env: env
    params:
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))

- name: generate-pks-config
  plan:
  - in_parallel:
    - get: custom-docker-image
    - get: platform-automation-image
      params:
        globs: ["*.tgz"]
        unpack: true
    - get: platform-automation-tasks
      params:
        globs: ["*.zip"]
        unpack: true
    - get: config-repo
    - get: automation-repo
    - get: pivnet-product
      resource: pks-product
      params:
        globs: []
      passed: [stage-pks]
    - get: tile-config-convertor
      <<: *cli-params

  - task: credhub-interpolate-env
    <<: *credhub-interpolate-env

  - task: generate-config
    image: custom-docker-image
    file: automation-repo/tasks/generate-config/task.yml
    input_mapping:
      git-repo: automation-repo
      env: env
      config: config-repo
    params:
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
      CONFIG_FILE: ((product_config_path))/((pks_config_filename))

- name: configure-pks
  serial: true
  plan:
  - in_parallel:
    - get: config-repo
    - get: platform-automation-image
      params:
        globs: ["*.tgz"]
        unpack: true
    - get: platform-automation-tasks
      params:
        globs: ["*.zip"]
        unpack: true
    - get: pks-product
      params:
        globs: []
      trigger: true
      passed: [stage-pks]

  - task: credhub-interpolate-env
    <<: *credhub-interpolate-env

  - task: credhub-interpolate-vars
    <<: *credhub-interpolate-vars

  - task: config-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config-repo
      env: env
      vars: vars
    params:
      CONFIG_FILE: ((product_config_path))/((pks_config_filename))
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
      VARS_FILES: ((vars_folder))/((product_vars_path))/((pks_var_filename))

- name: deploy
  serial: true
  plan:
  - in_parallel:
    - get: config-repo
    - get: platform-automation-image
      params:
        globs: ["*.tgz"]
        unpack: true
    - get: platform-automation-tasks
      params:
        globs: ["*.zip"]
        unpack: true
    - get: pks-product
      params:
        globs: []
      trigger: true
      passed: [configure-pks]

  - task: credhub-interpolate-env
    <<: *credhub-interpolate-env

  - task: deploy-pks
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: env
    params:
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
    attempts: ((attempts))

- name: release-lock
  plan:
  - get: pks-product
    params:
      globs: []
    trigger: true
    passed: [deploy]
  - get: pipeline-lock
  - in_parallel:
    - put: email
      params:
        subject_text: "Build finished: ${BUILD_PIPELINE_NAME}/${BUILD_JOB_NAME}/${BUILD_NAME}"
        body_text: "Build finished: ${ATC_EXTERNAL_URL}/teams/main/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}"
    - put: pipeline-lock
      params: {release: pipeline-lock}

## Remove this if you don't need it in your pipeline
- name: delete-all
  plan:
  - in_parallel:
    - get: config-repo
    - get: platform-automation-image
      params:
        globs: ["*.tgz"]
        unpack: true
    - get: platform-automation-tasks
      params:
        globs: ["*.zip"]
        unpack: true

  - task: credhub-interpolate-env
    <<: *credhub-interpolate-env

  - task: credhub-interpolate-vars
    <<: *credhub-interpolate-vars

  - task: delete-products
    image: platform-automation-image
    file: platform-automation-tasks/tasks/delete-installation.yml
    input_mapping:
      env: env
    params:
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))

  - task: delete-opsmanager-vm
    image: platform-automation-image
    file: platform-automation-tasks/tasks/delete-vm.yml
    input_mapping:
      state: config-repo
      config: config-repo
      vars: vars
    params:
      OPSMAN_CONFIG_FILE: ((product_config_path))/((opsman_config_filename))
      STATE_FILE: ((state_file_destination))/((state_filename))
      VARS_FILES: ((vars_folder))/((product_vars_path))/((opsman_var_filename))

  - task: commit-files-into-git
    image: platform-automation-image
    file: platform-automation-tasks/tasks/make-git-commit.yml
    input_mapping:
      repository: config-repo
      file-source: generated-state
    params:
      FILE_SOURCE_PATH: ((state_filename))
      FILE_DESTINATION_PATH: ((state_file_destination))/((state_filename))
      GIT_AUTHOR_NAME: ((ci_username))
      GIT_AUTHOR_EMAIL: ((ci_email_address))
      COMMIT_MESSAGE: "Updated state file after deleting the OpsManager VM"
  - in_parallel:
    - put: config-repo
      params:
        repository: repository-commit

    - put: email
      params:
        subject_text: "Build finished: ${BUILD_PIPELINE_NAME}/${BUILD_JOB_NAME}/${BUILD_NAME}"
        body_text: "Build finished: ${ATC_EXTERNAL_URL}/teams/main/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}"

- name: unset-lock
  plan:
  - get: pipeline-lock
  - put: pipeline-lock
    params: {release: pipeline-lock}

- name: set-upgrade-opsman-lock
  plan:
  - get: pipeline-lock
    passed: [release-opsman-lock]
  - get: product
    resource: ops-manager
    params:
      globs: []
    trigger: true
  - put: pipeline-lock
    params: {acquire: true}

- name: upgrade-ops-manager
  plan:
  - in_parallel:
    - get: pipeline-lock
      passed: [set-upgrade-opsman-lock]
    - get: config-repo
    - get: platform-automation-image
      params:
        globs: ["*.tgz"]
        unpack: true
    - get: platform-automation-tasks
      params:
        globs: ["*.zip"]
        unpack: true
    - get: product
      resource: ops-manager
      trigger: true
      params:
        globs:
        - ((opsman_glob))
      passed: [set-upgrade-opsman-lock]

  - task: credhub-interpolate-env
    <<: *credhub-interpolate-env

  - task: credhub-interpolate-vars
    <<: *credhub-interpolate-vars

  - task: export-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: env
    params:
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))

  - put: opsman-backup-bucket
    params:
      file: installation/installation-*.zip

  - task: upgrade-opsmanager
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upgrade-opsman.yml
    input_mapping:
      config: config-repo
      env: env
      image: product
      state: config-repo
      installation: installation
      vars: vars
    params:
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
      OPSMAN_CONFIG_FILE: ((product_config_path))/((opsman_config_filename))
      STATE_FILE: ((state_file_destination))/((state_filename))
      VARS_FILES: ((vars_folder))/((product_vars_path))/((opsman_var_filename))

  - task: commit-files-into-git
    image: platform-automation-image
    file: platform-automation-tasks/tasks/make-git-commit.yml
    input_mapping:
      repository: config-repo
      file-source: generated-state
    params:
      FILE_SOURCE_PATH: ((state_filename))
      FILE_DESTINATION_PATH: ((state_file_destination))/((state_filename))
      GIT_AUTHOR_NAME: ((ci_username))
      GIT_AUTHOR_EMAIL: ((ci_email_address))
      COMMIT_MESSAGE: "Updated state file after deleting the OpsManager VM"

  - in_parallel:
    - put: config-repo
      params:
        repository: repository-commit

    - task: apply-changes
      image: platform-automation-image
      file: platform-automation-tasks/tasks/apply-director-changes.yml
      input_mapping:
        env: env
      params:
        ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
      attempts: ((attempts))

- name: release-upgrade-opsman-lock
  plan:
  - in_parallel:
    - get: product
      resource: ops-manager
      params:
        globs: []
      passed: [upgrade-ops-manager]
      trigger: true
    - get: pipeline-lock
      passed: [upgrade-ops-manager]
  - in_parallel:
    - put: email
      params:
        subject_text: "Build finished: ${BUILD_PIPELINE_NAME}/${BUILD_JOB_NAME}/${BUILD_NAME}"
        body_text: "Build finished: ${ATC_EXTERNAL_URL}/teams/main/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}"

    - put: pipeline-lock
      params: {release: pipeline-lock}
