resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: email
  type: docker-image
  source:
    repository: pcfseceng/email-resource

resources:
- name: config-repo
  type: git
  source:
    uri: ((config_repo_git_url))
    branch: ((config_repo_git_branch))
    username: ((git_username))
    password: ((git_token))

- name: platform-automation-image
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: ((platform_automation_version))
    sort_by: semver

- name: ops-manager
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ops-manager
    product_version: ((opsman_product_version))

- name: platform-automation-tasks
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: ((platform_automation_version))
    sort_by: semver

- name: email
  type: email
  source:
    smtp:
      host: ((smtp_address))
      port: ((smtp_port))
      username: ((smtp_username))
      password: ((smtp_password))
    from: ((from_address))
    to: [((to_addresses))]

- name: opsman-backup-bucket
  type: s3
  source:
    endpoint: ((s3_endpoint))
    bucket: ((s3_bucket))
    regexp: installation-(.*).zip
    access_key_id: ((s3_access_key))
    secret_access_key: ((s3_secret_key))

- name: locks
  type: pool
  source:
    pool: ((lock_folder))
    uri: ((locks_git_url))
    branch: ((locks_git_branch))
    username: ((git_username))
    password: ((git_token))

credhub-interpolate: &credhub-interpolate-env
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  input_mapping:
    files: config-repo
  output_mapping:
    interpolated-files: env
  params:
    PREFIX: ((credhub_prefix))
    CREDHUB_CA_CERT: ((credhub_ca_cert))
    CREDHUB_CLIENT: ((credhub_client))
    CREDHUB_SECRET: ((credhub_client_secret))
    CREDHUB_SERVER: ((credhub_server))
    INTERPOLATION_PATHS: ((opsman_env_path))

credhub-interpolate: &credhub-interpolate-vars
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  input_mapping:
    files: config-repo
  output_mapping:
    interpolated-files: vars
  params:
    PREFIX: ((credhub_prefix))
    CREDHUB_CA_CERT: ((credhub_ca_cert))
    CREDHUB_CLIENT: ((credhub_client))
    CREDHUB_SECRET: ((credhub_client_secret))
    CREDHUB_SERVER: ((credhub_server))
    INTERPOLATION_PATHS: ((product_vars_path))
    SKIP_MISSING: true

jobs:

- name: set-lock
  plan:
  - get: product
    resource: ops-manager
    params:
      globs: []
    trigger: true
  - put: locks
    params: {acquire: true}

- name: upgrade-ops-manager
  plan:
  - in_parallel:
    - get: locks
      passed: [set-lock]
    - get: config-repo
    - get: platform-automation-image
      params:
        globs: ["*.tgz"]
        unpack: true
    - get: platform-automation-tasks
      params:
        globs: ["*.zip"]
        unpack: true
    - get: product
      resource: ops-manager
      trigger: true
      params:
        globs:
        - ((opsman_glob))

  - task: credhub-interpolate-env
    <<: *credhub-interpolate-env

  - task: credhub-interpolate-vars
    <<: *credhub-interpolate-vars

  - task: export-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: env
    params:
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))

  - put: opsman-backup-bucket
    params:
      file: installation/installation-*.zip

  - task: upgrade-opsmanager
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upgrade-opsman.yml
    input_mapping:
      config: config-repo
      env: env
      image: product
      state: config-repo
      installation: installation
      vars: vars
    params:
      ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
      OPSMAN_CONFIG_FILE: ((product_config_path))/((opsman_config_filename))
      STATE_FILE: ((state_file_destination))/((state_filename))
      VARS_FILES: ((vars_folder))/((product_vars_path))/((opsman_var_filename))

  - task: commit-files-into-git
    image: platform-automation-image
    file: platform-automation-tasks/tasks/make-git-commit.yml
    input_mapping:
      repository: config-repo
      file-source: generated-state
    params:
      FILE_SOURCE_PATH: ((state_filename))
      FILE_DESTINATION_PATH: ((state_file_destination))/((state_filename))
      GIT_AUTHOR_NAME: ((ci_username))
      GIT_AUTHOR_EMAIL: ((ci_email_address))
      COMMIT_MESSAGE: "Updated state file after deleting the OpsManager VM"

  - in_parallel:
    - put: config-repo
      params:
        repository: repository-commit

    - task: apply-changes
      image: platform-automation-image
      file: platform-automation-tasks/tasks/apply-director-changes.yml
      input_mapping:
        env: env
      params:
        ENV_FILE: ((opsman_env_path))/((opsman_env_filename))
      attempts: ((attempts))

- name: release-lock
  plan:
  - in_parallel:
    - get: product
      resource: ops-manager
      params:
        globs: []
      passed: [upgrade-ops-manager]
      trigger: true
    - get: locks
  - in_parallel:
    - put: email
      params:
        subject_text: "Build finished: ${BUILD_PIPELINE_NAME}/${BUILD_JOB_NAME}/${BUILD_NAME}"
        body_text: "Build finished: ${ATC_EXTERNAL_URL}/teams/main/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}"

    - put: locks
      params: {release: locks}

- name: unset-lock
  plan:
  - get: locks
  - put: locks
    params: {release: locks}
