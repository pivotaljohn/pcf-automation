#@ load("@ytt:data", "data")
resource_types:
- name: email
  type: docker-image
  source:
    repository: pcfseceng/email-resource

resources:
- name: config-repo
  type: git
  source:
    uri: ((config_repo_git.url))
    branch: ((config_repo_git.branch))
    username: ((git.username))
    password: ((git.token))

#@ for product in data.values.products:
#@ if/end product.metadata.is_opsman == True:
- name: ops-manager
  type: s3
  source:
    endpoint: ((s3.endpoint))
    bucket: #@ product.s3.bucket
    regexp: #@ product.s3.product_regex
    access_key_id: ((s3.access_key))
    secret_access_key: ((s3.secret_key))
    disable_ssl: true

#@ if/end product.metadata.is_opsman == True:
- name: opsman-backup-bucket
  type: s3
  source:
    endpoint: ((s3.endpoint))
    bucket: #@ product.s3.backup_bucket
    regexp: installation-(.*).zip
    access_key_id: ((s3.access_key))
    secret_access_key: ((s3.secret_key))

#@ if product.metadata.is_platform_automation == True:
- name: #@ product.name
  type: s3
  source:
    endpoint: ((s3.endpoint))
    bucket: #@ product.s3.bucket
    regexp: #@ product.s3.product_regex
    access_key_id: ((s3.access_key))
    secret_access_key: ((s3.secret_key))
    disable_ssl: true
#@ end
#@ end

- name: email
  type: email
  source:
    from: ((smtp.from_address))
    to: [((smtp.to_addresses))]
    smtp:
      host: ((smtp.address))
      port: ((smtp.port))
      #@ if data.values.smtp.is_auth_required == True:
      username: ((smtp.username))
      password: ((smtp.password))
      #@ else:
      anonymous: true
      #@ end

- name: pipeline-lock
  type: pool
  source:
    pool: ((lock_folder))
    uri: ((locks_git.url))
    branch: ((locks_git.branch))
    username: ((git.username))
    password: ((git.token))
    retry_delay: 60s

groups:
- name: complete
  jobs:
  - set-opsman-lock
  - install-ops-manager
  - configure-ops-director
  - deploy-director
  - release-opsman-lock
  - set-upgrade-opsman-lock
  - upgrade-ops-manager
  - install-ops-manager
  - release-upgrade-opsman-lock
  - unset-lock
  - delete-all
- name: install-opsman
  jobs:
  - set-opsman-lock
  - install-ops-manager
  - configure-ops-director
  - deploy-director
  - release-opsman-lock
  - unset-lock
- name: upgrade-opsman
  jobs:
  - set-upgrade-opsman-lock
  - upgrade-ops-manager
  - install-ops-manager
  - release-upgrade-opsman-lock
  - unset-lock
- name: cleanup
  jobs:
  - delete-all

jobs:
- name: set-opsman-lock
  plan:
  - in_parallel:
    - get: product
      resource: ops-manager
      params:
        skip_download: "true"
  - put: pipeline-lock
    params: {acquire: true}
    get_params:
      depth: 30

- name: install-ops-manager
  plan:
  - in_parallel:
    - get: pipeline-lock
      passed: [set-opsman-lock]
      params:
        depth: 30
    - get: config-repo
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: product
      resource: ops-manager
      passed: [set-opsman-lock]
      trigger: true

  - task: credhub-interpolate-env
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: config-repo
    output_mapping:
      interpolated-files: env
    params:
      PREFIX: ((credhub.prefix))
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub.client))
      CREDHUB_SECRET: ((credhub.client_secret))
      CREDHUB_SERVER: ((credhub.server))
      INTERPOLATION_PATHS: ((opsman_env.path))
      SKIP_MISSING: true

  - task: credhub-interpolate-vars
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: config-repo
    output_mapping:
      interpolated-files: vars
    params:
      PREFIX: ((credhub.prefix))
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub.client))
      CREDHUB_SECRET: ((credhub.client_secret))
      CREDHUB_SERVER: ((credhub.server))
      INTERPOLATION_PATHS: ((opsman_vars_path))
      SKIP_MISSING: true

  - task: deploy-opsmanager-vm
    image: platform-automation-image
    file: platform-automation-tasks/tasks/create-vm.yml
    input_mapping:
      state: config-repo
      image: product
      config: config-repo
      vars: vars
    params:
      OPSMAN_CONFIG_FILE: ((opsman_config_path))/((opsman_config_filename))
      STATE_FILE: ((state_filename))
      VARS_FILES: ((vars_folder))/((opsman_vars_path))/((opsman_var_filename))

  - task: commit-files-into-git
    image: platform-automation-image
    file: platform-automation-tasks/tasks/make-git-commit.yml
    input_mapping:
      repository: config-repo
      file-source: generated-state
    params:
      FILE_SOURCE_PATH: ((state_filename))
      FILE_DESTINATION_PATH: ((state_file_destination))/((state_filename))
      GIT_AUTHOR_NAME: ((ci_username))
      GIT_AUTHOR_EMAIL: ((ci_email_address))
      COMMIT_MESSAGE: "Updated state file after creating the OpsManager VM"

  - put: config-repo
    params:
      repository: repository-commit

#@ for product in data.values.products:
#@ if product.metadata.is_opsman == True:
#@ if product.metadata.authentication == "ldap":
  - task: configure-ldap-authentication
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-ldap-authentication.yml
    input_mapping:
      config: vars
      env: env
    params:
      ENV_FILE: ((opsman_env.path))/((opsman_env.filename))
      AUTH_CONFIG_FILE: ((opsman_vars_path))/((opsman_auth_filename))
    attempts: ((attempts))
#@ elif product.metadata.authentication == "saml":
  - task: configure-saml-authentication
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-saml-authentication.yml
    input_mapping:
      config: vars
      env: env
    params:
      ENV_FILE: ((opsman_env.path))/((opsman_env.filename))
      AUTH_CONFIG_FILE: ((opsman_vars_path))/((opsman_auth_filename))
    attempts: ((attempts))
#@ else:
  - task: configure-internal-authentication
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-authentication.yml
    input_mapping:
      config: vars
      env: env
    params:
      ENV_FILE: ((opsman_env.path))/((opsman_env.filename))
      AUTH_CONFIG_FILE: ((opsman_vars_path))/((opsman_auth_filename))
    attempts: ((attempts))
#@ end
#@ end
#@ end
- name: configure-ops-director
  plan:
  - in_parallel:
    - get: pipeline-lock
      passed: [install-ops-manager]
      params:
        depth: 30
    - get: config-repo
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: product
      resource: ops-manager
      params:
        skip_download: "true"
      trigger: true
      passed: [install-ops-manager]

  - task: credhub-interpolate-env
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: config-repo
    output_mapping:
      interpolated-files: env
    params:
      PREFIX: ((credhub.prefix))
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub.client))
      CREDHUB_SECRET: ((credhub.client_secret))
      CREDHUB_SERVER: ((credhub.server))
      INTERPOLATION_PATHS: ((opsman_env.path))
      SKIP_MISSING: true

  - task: credhub-interpolate-vars
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: config-repo
    output_mapping:
      interpolated-files: vars
    params:
      PREFIX: ((credhub.prefix))
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub.client))
      CREDHUB_SECRET: ((credhub.client_secret))
      CREDHUB_SERVER: ((credhub.server))
      INTERPOLATION_PATHS: ((director_vars_path))
      SKIP_MISSING: true

  - task: configure-ops-director
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: config-repo
      vars: vars
    params:
      VARS_FILES: ((vars_folder))/((director_vars_path))/((director_var_filename))
      ENV_FILE: ((opsman_env.path))/((opsman_env.filename))
      DIRECTOR_CONFIG_FILE: ((director_config_path))/((director_config_filename))

- name: deploy-director
  plan:
  - in_parallel:
    - get: pipeline-lock
      passed: [configure-ops-director]
      params:
        depth: 30
    - get: config-repo
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: product
      resource: ops-manager
      params:
        skip_download: "true"
      trigger: true
      passed: [configure-ops-director]

  - task: credhub-interpolate-env
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: config-repo
    output_mapping:
      interpolated-files: env
    params:
      PREFIX: ((credhub.prefix))
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub.client))
      CREDHUB_SECRET: ((credhub.client_secret))
      CREDHUB_SERVER: ((credhub.server))
      INTERPOLATION_PATHS: ((opsman_env.path))
      SKIP_MISSING: true

  - task: deploy-ops-director
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: env
    params:
      ENV_FILE: ((opsman_env.path))/((opsman_env.filename))
    attempts: ((attempts))

- name: release-opsman-lock
  plan:
  - get: pipeline-lock
    passed: [deploy-director]
    trigger: true
    params:
      depth: 30
  - put: pipeline-lock
    params: {release: pipeline-lock}
    get_params:
      depth: 30
  - put: email
    params:
      subject_text: "Build finished: ${BUILD_PIPELINE_NAME}/${BUILD_JOB_NAME}/${BUILD_NAME}"
      body_text: "Build finished: ${ATC_EXTERNAL_URL}/teams/main/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}"

- name: delete-all
  plan:
  - in_parallel:
    - get: config-repo
    - get: platform-automation-image
      params:
        globs: ["*.tgz"]
        unpack: true
    - get: platform-automation-tasks
      params:
        globs: ["*.zip"]
        unpack: true

  - task: credhub-interpolate-env
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: config-repo
    output_mapping:
      interpolated-files: env
    params:
      PREFIX: ((credhub.prefix))
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub.client))
      CREDHUB_SECRET: ((credhub.client_secret))
      CREDHUB_SERVER: ((credhub.server))
      INTERPOLATION_PATHS: ((opsman_env.path))
      SKIP_MISSING: true

  - task: credhub-interpolate-vars
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: config-repo
    output_mapping:
      interpolated-files: vars
    params:
      PREFIX: ((credhub.prefix))
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub.client))
      CREDHUB_SECRET: ((credhub.client_secret))
      CREDHUB_SERVER: ((credhub.server))
      INTERPOLATION_PATHS: ((opsman_vars_path))
      SKIP_MISSING: true

  - task: delete-products
    image: platform-automation-image
    file: platform-automation-tasks/tasks/delete-installation.yml
    input_mapping:
      env: env
    params:
      ENV_FILE: ((opsman_env.path))/((opsman_env.filename))

  - task: delete-opsmanager-vm
    image: platform-automation-image
    file: platform-automation-tasks/tasks/delete-vm.yml
    input_mapping:
      state: config-repo
      config: config-repo
      vars: vars
    params:
      OPSMAN_CONFIG_FILE: ((opsman_config_path))/((opsman_config_filename))
      STATE_FILE: ((state_file_destination))/((state_filename))
      VARS_FILES: ((vars_folder))/((opsman_vars_path))/((opsman_var_filename))

  - task: commit-files-into-git
    image: platform-automation-image
    file: platform-automation-tasks/tasks/make-git-commit.yml
    input_mapping:
      repository: config-repo
      file-source: generated-state
    params:
      FILE_SOURCE_PATH: ((state_filename))
      FILE_DESTINATION_PATH: ((state_file_destination))/((state_filename))
      GIT_AUTHOR_NAME: ((ci_username))
      GIT_AUTHOR_EMAIL: ((ci_email_address))
      COMMIT_MESSAGE: "Updated state file after deleting the OpsManager VM"
  - in_parallel:
    - put: config-repo
      params:
        repository: repository-commit

    - put: email
      params:
        subject_text: "Build finished: ${BUILD_PIPELINE_NAME}/${BUILD_JOB_NAME}/${BUILD_NAME}"
        body_text: "Build finished: ${ATC_EXTERNAL_URL}/teams/main/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}"

- name: unset-lock
  plan:
  - get: pipeline-lock
    params:
      depth: 30
  - put: pipeline-lock
    params: {release: pipeline-lock}
    get_params:
      depth: 30

- name: set-upgrade-opsman-lock
  plan:
  - get: pipeline-lock
    passed: [release-opsman-lock]
    params:
      depth: 30
  - get: product
    resource: ops-manager
    params:
      skip_download: "true"
    trigger: true
  - put: pipeline-lock
    params: {acquire: true}
    get_params:
      depth: 30

- name: upgrade-ops-manager
  plan:
  - in_parallel:
    - get: pipeline-lock
      passed: [set-upgrade-opsman-lock]
      params:
        depth: 30
    - get: config-repo
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: product
      resource: ops-manager
      trigger: true
      passed: [set-upgrade-opsman-lock]

  - task: credhub-interpolate-env
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: config-repo
    output_mapping:
      interpolated-files: env
    params:
      PREFIX: ((credhub.prefix))
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub.client))
      CREDHUB_SECRET: ((credhub.client_secret))
      CREDHUB_SERVER: ((credhub.server))
      INTERPOLATION_PATHS: ((opsman_env.path))
      SKIP_MISSING: true

  - task: credhub-interpolate-vars
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: config-repo
    output_mapping:
      interpolated-files: vars
    params:
      PREFIX: ((credhub.prefix))
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub.client))
      CREDHUB_SECRET: ((credhub.client_secret))
      CREDHUB_SERVER: ((credhub.server))
      INTERPOLATION_PATHS: ((opsman_vars_path))
      SKIP_MISSING: true

  - task: export-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: env
    params:
      ENV_FILE: ((opsman_env.path))/((opsman_env.filename))

  - put: opsman-backup-bucket
    params:
      file: installation/installation-*.zip

  - task: upgrade-opsmanager
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upgrade-opsman.yml
    input_mapping:
      config: config-repo
      env: env
      image: product
      state: config-repo
      installation: installation
      vars: vars
    params:
      ENV_FILE: ((opsman_env.path))/((opsman_env.filename))
      OPSMAN_CONFIG_FILE: ((opsman_config_path))/((opsman_config_filename))
      STATE_FILE: ((state_file_destination))/((state_filename))
      VARS_FILES: ((vars_folder))/((opsman_vars_path))/((opsman_var_filename))

  - task: commit-files-into-git
    image: platform-automation-image
    file: platform-automation-tasks/tasks/make-git-commit.yml
    input_mapping:
      repository: config-repo
      file-source: generated-state
    params:
      FILE_SOURCE_PATH: ((state_filename))
      FILE_DESTINATION_PATH: ((state_file_destination))/((state_filename))
      GIT_AUTHOR_NAME: ((ci_username))
      GIT_AUTHOR_EMAIL: ((ci_email_address))
      COMMIT_MESSAGE: "Updated state file after deleting the OpsManager VM"

  - in_parallel:
    - put: config-repo
      params:
        repository: repository-commit

    - task: apply-changes
      image: platform-automation-image
      file: platform-automation-tasks/tasks/apply-director-changes.yml
      input_mapping:
        env: env
      params:
        ENV_FILE: ((opsman_env.path))/((opsman_env.filename))
      attempts: ((attempts))

- name: release-upgrade-opsman-lock
  plan:
  - in_parallel:
    - get: product
      resource: ops-manager
      params:
        skip_download: "true"
      passed: [upgrade-ops-manager]
      trigger: true
    - get: pipeline-lock
      passed: [upgrade-ops-manager]
      params:
        depth: 30

  - in_parallel:
    - put: email
      params:
        subject_text: "Build finished: ${BUILD_PIPELINE_NAME}/${BUILD_JOB_NAME}/${BUILD_NAME}"
        body_text: "Build finished: ${ATC_EXTERNAL_URL}/teams/main/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}"

    - put: pipeline-lock
      params: {release: pipeline-lock}
      get_params:
        depth: 30
